# I couldn't get Traefik 2 to work, yet, but here's the config I tried with the day I need it
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: ingressroutes.traefik.containo.us
spec:
  group: traefik.containo.us
  version: v1alpha1
  names:
    kind: IngressRoute
    plural: ingressroutes
    singular: ingressroute
  scope: Namespaced
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: ingressroutetcps.traefik.containo.us
spec:
  group: traefik.containo.us
  version: v1alpha1
  names:
    kind: IngressRouteTCP
    plural: ingressroutetcps
    singular: ingressroutetcp
  scope: Namespaced
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: middlewares.traefik.containo.us
spec:
  group: traefik.containo.us
  version: v1alpha1
  names:
    kind: Middleware
    plural: middlewares
    singular: middleware
  scope: Namespaced
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: tlsoptions.traefik.containo.us
spec:
  group: traefik.containo.us
  version: v1alpha1
  names:
    kind: TLSOption
    plural: tlsoptions
    singular: tlsoption
  scope: Namespaced
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: traefik-ingress-controller
rules:
- apiGroups:
    - ""
  resources:
    - services
    - endpoints
    - secrets
  verbs:
    - get
    - list
    - watch
- apiGroups:
    - extensions
  resources:
    - ingresses
  verbs:
    - get
    - list
    - watch
- apiGroups:
    - extensions
  resources:
    - ingresses/status
  verbs:
    - update
- apiGroups:
    - traefik.containo.us
  resources:
    - middlewares
  verbs:
    - get
    - list
    - watch
- apiGroups:
    - traefik.containo.us
  resources:
    - ingressroutes
  verbs:
    - get
    - list
    - watch
- apiGroups:
    - traefik.containo.us
  resources:
    - ingressroutetcps
  verbs:
    - get
    - list
    - watch
- apiGroups:
    - traefik.containo.us
  resources:
    - tlsoptions
  verbs:
    - get
    - list
    - watch
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: traefik-ingress-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: traefik-ingress-controller
subjects:
- kind: ServiceAccount
  name: traefik-ingress-controller
  namespace: workshopctl
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: traefik-cfg
  namespace: workshopctl
  labels:
    app: traefik
data:
  traefik.yaml: |
    entryPoints:
      http:
        address: ":80"
      https:
        address: ":443"
      traefik:
        address: ":8080"
    http:
      routers:
        redirecttohttps:
          entryPoints: ["http"]
          middlewares: ["httpsredirect"]
          rule: "HostRegexp(`{host:.+}`)"
          service: "noop"
      services:
        # noop service, the URL will be never called
        noop:
          loadBalancer:
            servers:
            - url: "http://192.168.0.1"
      middlewares:
        httpsredirect:
          redirectScheme:
            scheme: "https"
    certificatesResolvers:
      sample:
        acme:
          email: lucas@luxaslabs.com
          storage: /letsencrypt/acme.json
          tlsChallenge: {}
          caServer: https://acme-v02.api.letsencrypt.org/directory
          # Staging: caServer: https://acme-staging-v02.api.letsencrypt.org/directory
    # Traefik should be able to access the kubernetes-dashboard over HTTPS without having to trust the dashboard's self-signed cert
    serversTransport:
      insecureSkipVerify: true
    providers:
      kubernetesIngress:
        ingressEndpoint:
          publishedService: "workshopctl/traefik"
    metrics:
      prometheus:
        entryPoint: traefik
    accessLog: {}
    log: {}
    api:
      insecure: true
      debug: true
    global:
      # Send anonymous usage data
      sendAnonymousUsage: false
---
apiVersion: v1
kind: Secret
metadata:
  name: traefik-basic-auth
  namespace: workshopctl
type: Opaque
data:
  auth: a3ViZXJuZXRlczokYXByMSRVNDlTVllISiQzNnZVelFhQktTNzRtY3lpT0V6MUkuCg==
---
apiVersion: v1
kind: Secret
metadata:
  name: traefik-basic-auth
  namespace: workshopctl
type: Opaque
data:
  auth: a3ViZXJuZXRlczokYXByMSRVNDlTVllISiQzNnZVelFhQktTNzRtY3lpT0V6MUkuCg==
---
kind: Deployment
apiVersion: apps/v1
metadata:
  namespace: workshopctl
  name: traefik
  labels:
    app: traefik
spec:
  replicas: 1
  selector:
    matchLabels:
      app: traefik
  template:
    metadata:
      labels:
        app: traefik
    spec:
      serviceAccountName: traefik-ingress-controller
      containers:
      - name: traefik
        image: traefik:v2.0-alpine
        ports:
        - name: web
          containerPort: 8000
        - name: websecure
          containerPort: 4443
        - name: admin
          containerPort: 8080
        volumeMounts:
        - name: traefik-cfg
          mountPath: /etc/traefik/
        - name: letsencrypt
          mountPath: /letsencrypt
      volumes:
      - name: traefik-cfg
        configMap:
          name: traefik-cfg
      - name: letsencrypt
        hostPath:
          path: /tmp/traefik
---
apiVersion: v1
kind: Service
metadata:
  name: traefik
  namespace: workshopctl
spec:
  ports:
    - name: web
      port: 80
    - name: websecure
      port: 443
  selector:
    app: traefik
  type: LoadBalancer
